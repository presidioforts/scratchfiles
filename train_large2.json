{
  "data": [
    {
      "input": "npm ERR! code ERESOLVE",
      "target": "Delete node_modules and package-lock.json, then run npm install."
    },
    {
      "input": "npm install hangs at idealTree",
      "target": "Clear npm cache with `npm cache clean --force` or check network proxies."
    },
    {
      "input": "npm WARN deprecated package",
      "target": "Update the package version or switch to a maintained alternative."
    },
    {
      "input": "TypeError: require(...).default is not a function",
      "target": "Check default import vs. named import in the source file."
    },
    {
      "input": "React scripts start fails with 'Cannot find module webpack'",
      "target": "Reinstall dependencies and ensure react-scripts version matches."
    },
    {
      "input": "node: bad option: --openssl-legacy-provider",
      "target": "Upgrade Node.js or remove the legacy flag in npm scripts."
    },
    {
      "input": "EACCES: permission denied during global npm install",
      "target": "Use nvm + local installs or run with sudo only when necessary."
    },
    {
      "input": "pip install fails with SSL: CERTIFICATE_VERIFY_FAILED",
      "target": "Set REQUESTS_CA_BUNDLE or update certificates via `pip install certifi --upgrade`."
    },
    {
      "input": "ModuleNotFoundError after pip install",
      "target": "Ensure virtualenv is active and package name matches import name."
    },
    {
      "input": "ERROR: Could not build wheels for psycopg2",
      "target": "Install build-essential and python-dev packages before pip install."
    },
    {
      "input": "pip dependency conflict: x requires y<2 but z requires y>=3",
      "target": "Pin compatible versions in requirements.txt and use pip-compile."
    },
    {
      "input": "Python segfault when importing tensorflow",
      "target": "Upgrade to latest TensorFlow or install the CPU\u2011only variant for your architecture."
    },
    {
      "input": "Error response from daemon: image pull access denied",
      "target": "Authenticate to the registry or check repository spelling."
    },
    {
      "input": "docker: Got permission denied while trying to connect to the Docker daemon socket",
      "target": "Add user to the docker group or run with sudo."
    },
    {
      "input": "OCI runtime error: exec user process caused \"exec format error\"",
      "target": "Ensure the container image matches the host architecture (e.g., arm64 vs amd64)."
    },
    {
      "input": "No space left on device during docker build",
      "target": "Prune unused images/volumes or increase disk space."
    },
    {
      "input": "failed to solve with frontend dockerfile.v0",
      "target": "Ensure BuildKit is enabled and Dockerfile syntax is correct."
    },
    {
      "input": "CrashLoopBackOff in pod",
      "target": "Run `kubectl logs` to find the root cause; adjust liveness & readiness probes."
    },
    {
      "input": "ImagePullBackOff",
      "target": "Verify image name and credentials, and that the image exists in the registry."
    },
    {
      "input": "Error: unable to recognize manifest: no matches for kind",
      "target": "Check the API version and kind against the cluster version."
    },
    {
      "input": "Pods stuck in Pending due to insufficient cpu",
      "target": "Scale the node pool or request fewer resources."
    },
    {
      "input": "TLS handshake error from 10.x.x.x",
      "target": "Ensure the service has a valid certificate and the client supports the protocol."
    },
    {
      "input": "fatal: refusing to merge unrelated histories",
      "target": "Use `git merge --allow-unrelated-histories` or rebase branches properly."
    },
    {
      "input": "git push: Permission denied (publickey)",
      "target": "Add the correct SSH key to your Git account and configure ssh-agent."
    },
    {
      "input": "error: Your local changes to the following files would be overwritten by merge",
      "target": "Commit or stash your changes before pulling."
    },
    {
      "input": "remote: Repository not found",
      "target": "Check the repository URL and your access permissions."
    },
    {
      "input": "Could not resolve dependency in Gradle",
      "target": "Refresh dependencies with `./gradlew --refresh-dependencies` and check repository URLs."
    },
    {
      "input": "mvn package fails: OutOfMemoryError",
      "target": "Increase Maven heap with `MAVEN_OPTS='-Xmx2g'`."
    },
    {
      "input": "Java: Unsupported major.minor version",
      "target": "Compile with a target that matches the runtime (e.g., --release flag)."
    },
    {
      "input": "Gradle build-info.json exceeds 1024 characters",
      "target": "Limit emitted scopes to compileClasspath to keep JSON short."
    },
    {
      "input": "psql: could not connect to server: Connection refused",
      "target": "Ensure the PostgreSQL service is running and port 5432 is open."
    },
    {
      "input": "ERROR: relation \"table\" does not exist",
      "target": "Use the correct schema or run migrations first."
    },
    {
      "input": "FATAL: password authentication failed for user",
      "target": "Verify username/password and pg_hba.conf settings."
    },
    {
      "input": "ERROR: Version in \"docker-compose.yml\" is unsupported",
      "target": "Upgrade Docker Compose or downgrade the file version."
    },
    {
      "input": "services.depends_on contains an undefined service",
      "target": "Check spelling and ensure the target service is defined."
    },
    {
      "input": "The security token included in the request is invalid",
      "target": "Configure AWS CLI with valid credentials or assume-role."
    },
    {
      "input": "Error: subnetId does not belong to the VPC",
      "target": "Pick a subnet within the same VPC as your resources."
    },
    {
      "input": "AccessDenied: bucket is owned by another account",
      "target": "Request bucket access or use a unique bucket name."
    },
    {
      "input": "gcloud authentication failed: invalid_grant",
      "target": "Run `gcloud auth login --update-adc` and check OAuth consent."
    },
    {
      "input": "Error 403: IAM permission denied",
      "target": "Grant the service account the required IAM roles."
    },
    {
      "input": "Jenkins build stuck in pending",
      "target": "Check executor availability and queue status."
    },
    {
      "input": "GitHub Actions rate-limited",
      "target": "Use the GitHub REST API status endpoint to verify quota and add backoff retries."
    },
    {
      "input": "circleci: no such file or directory",
      "target": "Ensure the path exists and Docker working directory matches."
    },
    {
      "input": "Connection timed out after 30000ms",
      "target": "Check firewall rules and service endpoint reachability."
    },
    {
      "input": "DNS_PROBE_FINISHED_NXDOMAIN",
      "target": "Verify DNS records and propagation."
    },
    {
      "input": "Segmentation fault (core dumped)",
      "target": "Run under gdb/valgrind to find invalid memory access."
    },
    {
      "input": "Permission denied: ./gradlew",
      "target": "Run `chmod +x gradlew` or check UMASK settings."
    },
    {
      "input": "make: *** [all] Error 2",
      "target": "Read the first error in the make output to find the failing target."
    }
  ]
}
