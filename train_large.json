[
  {
    "input": "Broken npm installation",
    "target": "**Issue:** npm is not functioning or producing errors due to a broken installation.\n\n**Solution:** The most reliable fix is to reinstall npm (which often means reinstalling Node.js, since npm comes bundled with Node).\n- **macOS/Linux:** Reinstall npm by reinstalling Node.js or updating npm directly. For example, if Node is installed, you can try updating npm with `npm install -g npm@latest`. Alternatively, remove the current Node.js and reinstall the latest version from the official source, which will include a fresh npm.\n- **Windows:** Download and run the latest Node.js installer from the official website. This will replace your npm with a fresh, working version. Ensure to completely uninstall any existing Node.js installation first if it’s badly corrupted, then install fresh.\n\nAfter reinstalling, verify by running `npm -v` to check that npm is working and on the expected version."
  },
  {
    "input": "Random errors (unspecified npm errors)",
    "target": "**Issue:** You are encountering strange or inconsistent errors from npm that don't have a clear cause.\n\n**Solution:** These issues can often be resolved with a clean cache and more debugging information:\n- Run `npm cache clean --force` to clear npm's cache. This will remove any cached packages or metadata that might be causing the issue.\n- Try the command again. If it fails, run it with verbose output: `npm install --verbose` (or add `-ddd` for maximum debug output) to see detailed logs. The extra information might pinpoint the cause of the error.\n- Ensure you are using the latest stable versions of Node.js and npm, as upgrading can fix random bugs. Update Node.js and run `npm install -g npm@latest` to update npm.\n- If the problem persists, consider removing your `node_modules` and `package-lock.json` then reinstalling, as sometimes a fresh install resolves intermittent issues."
  },
  {
    "input": "No compatible version found",
    "target": "**Issue:** npm reports 'No compatible version found' for a package, meaning it cannot find a version of a dependency that satisfies the version range specified.\n\n**Cause:** Often, this happens if your npm is outdated and not fetching the newest available package versions, or if the requested version range truly has no match (e.g., a typo or a nonexistent version).\n\n**Solution:**\n1. **Update npm:** Make sure you're using the latest npm. Run `npm install -g npm@latest` to upgrade npm, then try the installation again. Newer npm versions have improved registry metadata handling.\n2. **Verify the package and version:** Double-check the package name and version range in your `package.json` or install command. If it's a private package or a fork, ensure it’s published to the registry you're using. A common scenario is that a dependency is requesting a version that was never published or has been deprecated.\n3. **Clear cache and retry:** Run `npm cache clean --force` to clear any stale metadata, then retry `npm install`.\n4. If after updating npm and verifying the details you still get this error, it is likely the package or version truly doesn’t exist on the registry. Adjust the dependency to a valid version or contact the package maintainer."
  },
  {
    "input": "EACCES: permission denied (npm permissions error)",
    "target": "**Issue:** You see an EACCES or permission denied error when installing packages, often when installing globally (with `-g`). This means npm does not have the rights to create files or directories in the target location.\n\n**Cause:** This typically occurs on Unix-like systems when npm attempts to write to directories owned by root (for example, `/usr/local/lib/node_modules` or `/usr/local/bin`). It can happen if you previously used `sudo` to install packages or if Node was installed in a root-owned directory.\n\n**Solution:** There are multiple approaches to resolve permission errors:\n1. **Reinstall Node using a version manager:** The safest long-term fix is to install Node.js via a version manager like nvm (for macOS/Linux) or nvm-windows. This keeps Node and npm in your user space, avoiding global permission issues. Uninstall the system Node, install via nvm, and then reinstall global packages as needed.\n2. **Change npm's default directory:** Configure npm to use a directory in your home folder for global installs, instead of a system directory:\n   - Create a directory for global packages, e.g. `mkdir \"$HOME/.npm-global\"`.\n   - Configure npm to use this new directory: `npm config set prefix \"$HOME/.npm-global\"`.\n   - Add the new directory’s bin to your PATH. For example, add `export PATH=\"$HOME/.npm-global/bin:$PATH\"` to your shell profile (e.g., `~/.bashrc`).\n   - Open a new terminal and try installing globally again (no sudo needed).\n3. **Fix permissions on the system directories:** If you prefer to use the system Node installation, you can manually change the ownership of the directories that npm uses:\n   - Find the npm prefix: `npm config get prefix` (commonly `/usr/local`).\n   - Change ownership of related directories to your user: `sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}`. This grants your user account ownership of the Node modules directory and associated bins, eliminating the need for sudo.\n4. **Avoid using sudo with npm:** Going forward, install global packages without `sudo`. If a permission error occurs after the above steps, double-check that the directory ownerships are correct and that you're not inadvertently still using root-owned directories.\n\nAfter applying one of these solutions, retry the npm command. It should proceed without EACCES errors."
  },
  {
    "input": "Error: ENOENT, stat 'C:\\Users\\<user>\\AppData\\Roaming\\npm'",
    "target": "**Issue:** On Windows, npm throws an error like `ENOENT, stat 'C:\\Users\\<YourUser>\\AppData\\Roaming\\npm'`. This indicates npm expected a directory that doesn't exist.\n\n**Cause:** This is a known bug in certain older Node.js installers for Windows (e.g., Windows 7 era) where the installer did not create the `%APPDATA%\\npm` folder. npm expects that folder for global installations or cache, and if it's missing, you get this error.\n\n**Solution:** Create the missing directory manually and ensure it’s writable by your user:\n1. Open a Command Prompt (CMD) or PowerShell **as your regular user** (no admin needed).\n2. Run the command to create the npm directory: \n   ```shell\n   mkdir \"%APPDATA%\\npm\"\n   ``` \n   This will create the folder `C:\\Users\\<YourUser>\\AppData\\Roaming\\npm`.\n3. Verify that the directory now exists. It should be owned by your user. If not, right-click the folder, go to Properties -> Security, and give your user Full Control.\n4. Re-run the npm command that failed. It should now succeed without the ENOENT error.\n\nThis is a one-time fix; once the directory exists, npm will use it for caching and global binaries."
  },
  {
    "input": "ENOSPC: no space left on device",
    "target": "**Issue:** npm fails with an `ENOSPC` error (No space left on device), indicating it cannot write to disk because the disk is full or not writable.\n\n**Solution:** Free up or provide more space for npm's operations:\n- **Free Disk Space:** Check the drive where npm is writing (often the system temp directory or the current drive). Delete unnecessary files to free up storage and then retry the npm operation.\n- **Change npm's temp location:** If you're low on space on the default drive, redirect npm to use a different location for temporary files. For example:\n  ```shell\n  npm config set tmp /path/to/drive/with/space/tmp\n  ``` \n  Replace the path with a directory on a drive that has ample space. On Windows, you can set a path like `D:\\temp\\npm`. This ensures npm uses that location for extraction and caching, avoiding the full disk.\n- **Run npm on a different drive:** If possible, run the npm command in a workspace located on a drive with more space (npm will use the same drive for temp by default).\n- **Permissions check:** Ensure that the error is truly due to space and not permissions. An `ENOSPC` typically means space, but if the drive has space, check that your user can write to the location (especially on Linux, a quota or fs permission issue could manifest similarly).\n\nAfter freeing space or reconfiguring, run the npm command again. The error should resolve once sufficient space is available."
  },
  {
    "input": "npm ERR! not found: git (ENOGIT)",
    "target": "**Issue:** npm fails to find the `git` command (error like \"not found: git\" or code ENOGIT). This happens when a package install requires Git (for example, pulling from a GitHub repository) but Git isn’t available.\n\n**Solution:** Install Git and ensure it's on your system PATH:\n1. **Install Git:** Download Git from the official site (git-scm.com) or use a package manager (e.g., `sudo apt-get install git` on Debian/Ubuntu, `brew install git` on macOS, or `choco install git` on Windows). Follow the installer instructions if using the GUI installer on Windows, making sure to enable \"Git from the command line\" if prompted.\n2. **Verify Git is accessible:** Open a new terminal or command prompt and run `git --version`. You should see a version number if Git is installed and in the PATH. If not, add the Git `bin` directory to your PATH environment variable.\n3. **Re-run npm:** Once Git is installed and available, try the npm command again. npm will now be able to fetch dependencies via Git as needed.\n\nIf you continue to see a Git-related error, ensure that the environment where npm is running has access to Git. For example, some IDEs or build servers might have limited PATH configurations; update their settings accordingly."
  },
  {
    "input": "Path length issues on Windows (MAX_PATH limitation)",
    "target": "**Issue:** On Windows (especially with Vagrant or shared folders), npm operations fail due to extremely long file paths. Errors might be non-obvious (ENOENT or EPERM on deeply nested files) because Windows has a default MAX_PATH length of 260 characters.\n\n**Solution:** Enable long path support or workaround the limitation:\n1. **Enable Long Paths in Windows 10+:** Modern Windows can exceed the 260 char limit if enabled. Open the Local Group Policy Editor (`gpedit.msc`) and navigate to **Local Computer Policy > Computer Configuration > Administrative Templates > System > Filesystem**. Enable the policy \"Enable Win32 long paths\". Alternatively, set the registry value `HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\LongPathsEnabled` to `1`. Restart the system if needed. This allows the OS and Node to handle long paths.\n2. **Adjust project structure:** Try to flatten your `node_modules` or use tools that avoid deep nesting. For instance, use npm v3+ (which has a flatter dependency structure by default) or package managers like Yarn or PNPM that mitigate long path issues. This reduces the likelihood of paths exceeding the limit.\n3. **Vagrant/VirtualBox shared folder fix:** If you're using Vagrant on Windows, configure the synced folder to support long paths. For example, in your Vagrantfile, you can add a customization to prefix the path with `\\\\?\\` (the Windows long path prefix). A sample configuration in Ruby:\n   ```ruby\n   config.vm.provider \"virtualbox\" do |v|\n     v.customize [\"sharedfolder\", \"add\", :id, \"--name\", \"project\", \"--hostpath\", (\"//?/\" + File.expand_path(\".\")).gsub(\"/\",\"\\\\\")]\n   end\n   ```\n   This ensures the shared folder is created with long path support. Restart your Vagrant VM after making this change.\n4. **Use a different drive or shorter base path:** If possible, move your project to a location with a shorter path (closer to the root of the drive). For example, `C:\\dev\\myproject` instead of a deep nested path. This gives more room for `node_modules` nesting.\n\nAfter applying these solutions, try running npm again. Long path issues should be resolved, preventing those mysterious ENOENT/EPERM errors due to path length."
  },
  {
    "input": "Git/SSH protocol blocked by proxy",
    "target": "**Issue:** npm is trying to fetch a package from a Git repository (git:// or git@ URLs), but your corporate proxy or firewall blocks git and ssh protocols. This results in failures to fetch the dependency.\n\n**Solution:** Configure Git to use HTTPS instead of git/ssh for GitHub URLs, which proxies can handle:\n1. Run the following Git configuration commands to rewrite URLs:\n   ```shell\n   git config --global url.\"https://github.com/\".insteadOf git@github.com:\n   git config --global url.\"https://\".insteadOf git://\n   ```\n   These commands tell Git: whenever it encounters a repository URL starting with `git@github.com:` (SSH) or `git://` (unauthenticated Git), replace it with an HTTPS URL. This way, npm (which uses Git under the hood) will effectively use HTTPS to fetch, which your proxy can pass through.\n2. Verify the settings by checking your global Git config (`git config --global -e` should show the new url rewrite rules).\n3. Now retry the npm install. It should attempt to fetch GitHub repositories over HTTPS and succeed behind the proxy (assuming your proxy is configured in your system or environment).\n4. **Ensure proper proxy config:** If you haven't already, make sure your environment or Git is aware of the proxy. Setting `HTTP_PROXY`/`HTTPS_PROXY` environment variables or Git's `http.proxy` config might be necessary if the HTTPS requests need to go through an authenticating proxy.\n\nBy forcing Git to use HTTPS and configuring the proxy, you avoid the block on git/ssh protocols and npm can retrieve the dependencies."
  },
  {
    "input": "SSL Error (CERT_UNTRUSTED or SELF_SIGNED_CERT_IN_CHAIN)",
    "target": "**Issue:** npm encounters an SSL error when trying to connect to the registry or another resource. Common messages include `SSL routines:...:unknown protocol`, `CERT_UNTRUSTED`, `UNABLE_TO_VERIFY_LEAF_SIGNATURE`, or `SELF_SIGNED_CERT_IN_CHAIN`.\n\n**Causes:** These errors indicate a problem with the SSL/TLS handshake. Possible causes include:\n- Talking to an HTTP (unencrypted) service as if it were HTTPS (\"unknown protocol\" error), often due to a misconfigured proxy or registry URL.\n- Outdated Node.js version (Node < 0.8) which doesn’t support newer certificates (leading to CERT_UNTRUSTED or similar errors).\n- A corporate or self-signed certificate in the chain that Node doesn’t trust (SELF_SIGNED_CERT_IN_CHAIN).\n\n**Solution:**\n1. **Check your Node and npm versions:** If you're on a very old Node.js (like 0.6 or 0.8), upgrade to a modern version. Older Node versions had outdated certificate authorities. Upgrading Node (and npm) can immediately resolve trust issues like `CERT_UNTRUSTED` or `UNABLE_TO_VERIFY_LEAF_SIGNATURE`.\n2. **Verify registry and proxy settings:** If you see an \"unknown protocol\" SSL error, it likely means an HTTP/HTTPS mix-up. Ensure your npm registry is set to `https://registry.npmjs.org/` (check with `npm config get registry`). If you're behind a proxy, verify `npm config get proxy` and `... get https-proxy` are correct. For an HTTP proxy, the proxy config should start with `http://`, not `https://` (and vice versa for an HTTPS proxy). Correct any wrong configuration and try again.\n3. **Trust the certificate (Corporate CAs):** For errors like `SELF_SIGNED_CERT_IN_CHAIN` or corporate MITM certificates, you need to make npm/Node trust your company's root certificate:\n   - Obtain the corporate SSL certificate (the root CA used by your proxy). This might be available from your IT department or extracted from your browser.\n   - Save the certificate to a file (e.g., `corpCA.pem`).\n   - Instruct npm to use this certificate: `npm config set cafile /path/to/corpCA.pem`. This makes npm add that CA when making requests.\n4. **Disable strict SSL (last resort):** If you cannot quickly get the certificate, a temporary workaround is to bypass SSL checks:\n   ```shell\n   npm config set strict-ssl false\n   ```\n   This will allow npm to proceed with HTTPS requests without validating the certificate chain. **Use this only as a last resort** since it makes your connections susceptible to man-in-the-middle attacks.\n5. **Empty CA (legacy fix):** A similar workaround is `npm config set ca \"\"`, which essentially tells npm not to use any CA bundle (thus accepting any cert). Again, not recommended except for isolated troubleshooting.\n\nAfter applying the appropriate fix (preferably by trusting the correct certificate or fixing configs), rerun your npm command. The SSL errors should be resolved, allowing npm to connect securely."
  },
  {
    "input": "SSL-intercepting proxy (corporate MITM)",
    "target": "**Issue:** You're behind a corporate proxy or firewall that intercepts SSL traffic (acts as a 'man-in-the-middle' for HTTPS). npm's requests fail because it detects the proxy's certificate as untrusted (since the proxy is re-signing the traffic with its own certificate).\n\n**Solution:** To work with an SSL-intercepting proxy, you need to make npm/Node trust the proxy’s custom certificate, or disable SSL verification (not recommended except in a pinch):\n1. **Obtain the Proxy's Certificate:** Ask your IT department or export the root certificate used by the proxy (often by inspecting the certificate of an HTTPS site in your browser at work, you can get the issuer details). Save this certificate as a .pem file (e.g., `proxyCA.pem`).\n2. **Configure npm to trust it:** Run: \n   ```shell\n   npm config set cafile \"path/to/proxyCA.pem\"\n   ``` \n   This tells npm to use that CA file in addition to the default CAs when verifying SSL. Alternatively, set the environment variable `NODE_EXTRA_CA_CERTS=\"path/to/proxyCA.pem\"` before running npm (this makes Node.js itself trust that cert).\n3. **Test the connection:** Try `npm ping` or an npm install. If configured correctly, the SSL handshake should succeed using the provided CA, and npm will work behind the proxy.\n4. **(Alternative) Use HTTP:** If for some reason adding the certificate isn't feasible, you can configure npm to use plain HTTP for the registry (not secure, use only if absolutely required by environment): \n   ```shell\n   npm config set registry http://registry.npmjs.org/\n   npm config set strict-ssl false\n   ``` \n   This bypasses SSL entirely for the registry. **Use with caution**, as it exposes you to potential tampering.\n5. **Verify Proxy Config:** Ensure you have also set `npm config set proxy` and `... set https-proxy` to your proxy's address (including credentials if needed), so npm knows to route traffic through the proxy.\n\nWorking with an intercepting proxy can be tricky, but once the certificate is trusted or SSL verification disabled (temporary), npm should function normally. Always prefer trusting the certificate over disabling SSL for better security."
  },
  {
    "input": "404 Not Found (npm registry)",
    "target": "**Issue:** npm is encountering `404 Not Found` or similar errors when trying to download a package (for example, a 404 for a tarball URL, or `npm ERR! 404 Not Found`).\n\n**Cause:** A 404 from the npm registry typically means it cannot find the package or version requested. This could be a temporary registry glitch or a genuine absence of the package/version.\n\n**Solution:**\n1. **Check the package name/version:** Make sure you didn't misspell the package name or specify a version that doesn't exist. For example, if your package.json requests `package-x@1.2.3` but only 1.2.2 exists, the registry will return 404. Correct any typos or version mistakes.\n2. **Verify registry status:** If the name and version are correct, it might be a transient issue with the npm registry. Check the npm status page or status.npmjs.org to see if there are any outages. If so, wait and try again later.\n3. **Package unpublished or moved:** It's possible the package was unpublished or is only available under a different scope/registry. If this is a third-party dependency, check if the maintainers moved it or if it’s meant to be installed from a different source (e.g., GitHub or a private registry). Update your dependencies accordingly.\n4. **Corrupt package on registry:** In rare cases, a package entry on the registry might be corrupted. If it's your own package, try publishing it again under a new version. If it's someone else's package and the issue persists, you might need to reach out to the maintainers or open an issue in the package's repository.\n5. **Private package access:** If the package is supposed to be private (or part of a private registry/Nexus), a 404 can mean \"not authorized\" (npm returns 404 for unauthorized access to private packages). Ensure you are authenticated (`npm login` or have an `_authToken` set) and the registry config (`npm config get registry`) is correct for private modules.\n\nOnce you've corrected the cause or the registry issue is resolved, run the npm install again. The package should download successfully if the 404 cause was addressed."
  },
  {
    "input": "Error: Invalid JSON (npm registry response)",
    "target": "**Issue:** npm fails with an error about `Invalid JSON` or `Unexpected token <` while parsing JSON. This usually occurs during fetching package metadata from the registry.\n\n**Causes:**\n- A temporary hiccup or corruption of data from the npm registry (e.g., a bad response or downtime leading to HTML error page being returned instead of JSON).\n- A corporate proxy that intercepts registry requests and returns an HTML login page or error page (which isn't valid JSON).\n- An issue with a specific package's `package.json` on the registry being malformed (rare).\n\n**Solution:**\n1. **Clear npm cache:** Run `npm cache clean --force` to remove cached package data. Sometimes a corrupt cache entry can cause JSON parse errors. After cleaning, try the install again.\n2. **Check proxy and firewall:** If you're behind a proxy, ensure your npm is configured to use it (via `npm config set proxy`/`https-proxy`). An intercepting proxy might be injecting HTML (like a login form) instead of the JSON npm expects. You may need to authenticate your proxy separately or configure npm’s proxy settings correctly.\n3. **Retry later:** If it was a registry glitch, simply waiting a few minutes and trying again can help. Transient issues on the npm registry or network can produce malformed responses that resolve on retry.\n4. **Validate package content:** If the error consistently occurs on one specific package, that package’s metadata might be problematic. Try installing a different version of it, or inspect the package's `package.json` if possible. You could also report the issue to the package author or npm support.\n\nAfter taking these steps, run the npm command again. If the JSON error was due to caching or proxy issues, it should now succeed with a proper JSON response from the registry."
  },
  {
    "input": "ENOENT / ENOTEMPTY errors during install",
    "target": "**Issue:** During an npm install, you see many errors like `ENOENT: no such file or directory` or `ENOTEMPTY: directory not empty` (often relating to file operations like lstat, chmod, unlink). These appear as npm is trying to clean up or move files.\n\n**Cause:** npm performs many actions in parallel to speed up installs. In older versions of npm (prior to 2.x and some 3.x), this sometimes led to race conditions where it attempted file operations in the wrong order. The result was transient ENOENT (file not found) or ENOTEMPTY (directory not empty) errors, even though the files eventually end up installed.\n\n**Solution:**\n1. **Update npm to latest:** Ensure you're using a modern npm (e.g., npm 8+). Many of these issues were fixed in npm 2.0 and later, and further improvements have been made since. Run `npm install -g npm@latest` and then retry the installation.\n2. **Clean and retry:** Remove the `node_modules` directory and `package-lock.json` (or `npm-shrinkwrap.json` if present), then run `npm install` again. A fresh install can clear up any partial installs or leftover files causing conflicts.\n3. **Sequential install (temporary workaround):** If updating isn't an option and the error persists, you can try installing dependencies one by one or reduce concurrency. For example: `npm install --batch-size=1` (for npm v7+, which limits parallelism) or use `npm install --legacy-bundling` to avoid deep nesting concurrency issues. This can sidestep race conditions at the cost of speed.\n4. **Check for external interference:** On Windows especially, an antivirus or search indexing might lock files and cause ENOENT/ENOTEMPTY issues during cleanup. Try disabling such processes temporarily while installing.\n5. **Consult known issues:** If nothing works, search the npm issue tracker for similar ENOENT/ENOTEMPTY reports. There may be specific edge cases with known fixes. For example, certain versions of npm had known bugs around simultaneous installs that might require a workaround or patch.\n\nIn most cases, simply upgrading npm and doing a clean reinstall will eliminate these errors. Once resolved, subsequent npm installs should complete without these file system errors."
  },
  {
    "input": "npm ERR! cb() never called!",
    "target": "**Issue:** npm stops with an error `cb() never called!`, which indicates that a callback in the npm code was not executed – essentially, the npm process did not complete properly.\n\n**Cause:** This was a known bug in certain npm versions (notably around npm 2.1.5) often triggered by using npm-shrinkwrap (the predecessor to package-lock.json) or sometimes by race conditions during installation. It means npm got into a state where it expected something (a callback) that never happened, usually due to a logic error internally.\n\n**Solution:**\n1. **Update npm:** The first step is to upgrade to the latest npm, as this specific bug (`cb() never called`) has been fixed in newer releases. Run `npm install -g npm@latest` and then try your install or command again.\n2. **Remove shrinkwrap/lock file:** If you are using an older project with `npm-shrinkwrap.json` (or even a `package-lock.json`), move or rename that file and retry `npm install`. If the shrinkwrap was triggering the bug, the install may succeed without it. You can generate a new lock file afterwards with a fixed npm.\n3. **Clean node_modules:** Delete the `node_modules` directory to ensure no partial installs are causing issues, then run `npm install` fresh.\n4. **Check for package issues:** In some cases, a problematic package or script could also cause npm to abort unexpectedly. Review the npm log (npm might have written a debug log file like `npm-debug.log`) around where it stopped to see if a specific package's install script was involved.\n\nUsually, updating npm is sufficient. Once you have a stable version of npm and possibly a refreshed lockfile, the `cb() never called!` error should no longer occur."
  },
  {
    "input": "npm login error (password_sha and pbkdf2)",
    "target": "**Issue:** `npm login` is failing. In some cases, you might see an error message like \"may not mix password_sha and pbkdf2\" or login simply doesn't work despite correct credentials.\n\n**Cause:** This can happen if your npm account credentials need updating. The specific error about *password_sha* vs *pbkdf2* indicates an internal inconsistency in how your password is stored (npm switched hashing algorithms). It might also happen if your email on the account isn't verified or doesn't match what you're providing.\n\n**Solution:**\n1. **Verify credentials on the website:** Go to https://www.npmjs.com/login and log in through the web. Ensure your username/email and password are correct. If you can't log in via web, reset your password first.\n2. **Ensure email matches:** While logged in on the npm website, check your profile settings for the email address. Use that same email for `npm login` in the CLI. The CLI will fail if the email cases don’t match exactly or if it's the wrong email for the account.\n3. **Reset your password:** If you got the \"password_sha and pbkdf2\" error, on the npm website go to profile or password settings and change your password (you can even re-use the same password). This action updates your account to use the new hashing scheme.\n4. **Clear old credentials:** Remove any saved auth tokens or credentials in your npm config file. Open `~/.npmrc` and delete lines that contain `registry.npmjs.org/:_authToken` or any base64 `_auth` entries, as well as any email or username entries under `//registry.npmjs.org/`.\n5. **Try npm login again:** Run `npm login` in the terminal and enter your username, email, and password. It should now succeed. If you reset your password, use the new password.\n6. **Two-Factor Auth considerations:** If your account has 2FA enabled, `npm login` will also ask for a one-time password (OTP). Make sure to supply the code from your authenticator. If you have 2FA for auth-only (and not for publishing), you might need to use a legacy token instead of login. In such case, generate a token via the website and set it in `~/.npmrc`.\n\nFollowing these steps resolves most login issues. Once authenticated, npm commands like publish or installing private packages should work with your account."
  },
  {
    "input": "npm hangs on Windows at addRemoteTarball",
    "target": "**Issue:** On Windows, npm appears to freeze or hang while showing a message about `addRemoteTarball` (or during the fetch of a package tarball). The process does not complete or show errors.\n\n**Cause:** One known cause for this specific hang was having multiple temp directories configured for npm. In some cases, a misconfiguration in the npm settings (e.g., `.npmrc`) led to npm getting confused about where to store temporary files, causing it to hang.\n\n**Solution:** Check and correct npm's temp directory configuration:\n1. **Inspect npm config:** Run `npm config ls -l` to list all effective configurations. Look for the `tmp` configuration. If `tmp` is listed more than once with different paths, that's likely the issue.\n2. **Edit npmrc if needed:** Open your global npmrc (on Windows, this might be in `%AppData%\\npm\\etc\\npmrc` or check `npm config get userconfig`). Remove any duplicate or incorrect `tmp=` lines, leaving only one `tmp` setting (or none, to use the default). For example, ensure there's only one reference to your intended temp directory.\n3. **Remove extra tmp config via command:** Alternatively, you can run `npm config delete tmp` to clear any custom temp directory setting, letting npm use its default temp directory.\n4. **Retry the install:** After cleaning the config, run the npm command again. It should proceed past `addRemoteTarball` without hanging.\n5. **Other potential causes:** If the hang still occurs, consider clearing the npm cache (`npm cache clean --force`) and trying again. In rare cases, the hang could be due to a firewall or antivirus scanning the tarball download; disabling those temporarily can identify if that's the cause.\n\nOnce the configuration is corrected (only one tmp directory setting), npm should no longer hang at the addRemoteTarball stage."
  },
  {
    "input": "npm not updated (Windows old version persists)",
    "target": "**Issue:** You updated npm on Windows (for example via `npm install -g npm@latest`), but when you check `npm -v`, it still shows the old version. Npm seems stuck on an older version even after an update.\n\n**Cause:** On Windows, multiple copies of npm can exist. The Node.js installer places npm in `C:\\Program Files\\nodejs\\npm` and also a copy in `%AppData%\\npm\\node_modules`. If the PATH order or installation got mixed up, the system might still be using the old npm.\n\n**Solution:** Ensure the correct npm is being used and remove duplicates:\n1. **Find all npm installations:** Open a Command Prompt and run `where npm`. This will list all occurrences of npm in your PATH. For example, you might see something like:\n   ```\n   C:\\Program Files\\nodejs\\npm\n   C:\\Program Files\\nodejs\\npm.cmd\n   C:\\Users\\<YourUser>\\AppData\\Roaming\\npm\\npm\n   C:\\Users\\<YourUser>\\AppData\\Roaming\\npm\\npm.cmd\n   ```\n2. **Remove or update old npm files:** If `where npm` shows npm in your Nodejs installation folder and also in AppData, the update may have installed a new npm under AppData but the PATH might still be picking up the one in Program Files first. You have a few options:\n   - Uninstall and reinstall Node.js: This ensures a clean state with the latest npm. After uninstalling Node (which removes the Program Files npm), reinstall the latest Node which comes with a recent npm. Then run `npm install -g npm@latest` if needed to update further.\n   - Or, manually delete the old npm files in `C:\\Program Files\\nodejs` (npm, npm.cmd, and possibly the node_modules\\npm folder there). Be careful: only do this if you know that npm in Program Files is outdated and you're replacing it with the one in AppData.\n   - Alternatively, adjust your PATH so that `%AppData%\\npm` appears before `C:\\Program Files\\nodejs` for npm. This will cause the system to pick up the updated npm first.\n3. **Verify version:** After cleanup, close and reopen your terminal (to refresh PATH) and run `npm -v`. It should now show the newer version. Also test npm functionality to ensure it’s intact.\n4. **Use Node version managers:** In the future, using a tool like nvm-windows can help manage Node and npm versions more cleanly without conflicts. But for the built-in approach, keeping one npm on PATH is key.\n\nBy removing duplicate npm installations or ensuring the updated one is prioritized, you can fix the issue of the npm version not updating on Windows."
  },
  {
    "input": "Network error (ETIMEDOUT or ECONNRESET)",
    "target": "**Issue:** npm commands are failing with network-related errors such as `ETIMEDOUT`, `ECONNRESET`, or a general `npm ERR! network` message. This indicates npm is unable to reach the registry or is experiencing connectivity issues.\n\n**Solution:** Troubleshoot the network connectivity and proxy settings:\n1. **Check internet connection:** Ensure your machine has an active internet connection. Try opening `https://registry.npmjs.org/` in a web browser to confirm it's reachable (you should see a JSON or `{\"db_name\":\"registry\"...}` response). If the registry isn't reachable via browser, the issue is likely with your network connection.\n2. **Proxy configuration:** If you are behind a corporate proxy, configure npm to use it. Set the proxy settings in npm:\n   ```shell\n   npm config set proxy http://<proxy-host>:<proxy-port>\n   npm config set https-proxy http://<proxy-host>:<proxy-port>\n   ```\n   Or set the environment variables `HTTP_PROXY` and `HTTPS_PROXY`. Include credentials if required (e.g. `http://username:password@proxy:port`). Without proper proxy config, npm requests may time out or reset.\n3. **Firewall/antivirus:** Check if a firewall or antivirus is blocking Node.js. Temporarily disable them and try again. If npm works with them off, adjust their settings to allow Node.js or open the necessary ports (typically 443 for HTTPS).\n4. **Verify registry URL:** Confirm that npm is pointing to the correct registry. Run `npm config get registry` – it should usually be `https://registry.npmjs.org/`. An incorrect or internal registry URL could be failing. If using a self-hosted registry, ensure that service is up.\n5. **Try a different network:** If possible, connect to a different network (such as a mobile hotspot or home network) and run the npm command. This can help determine if the problem is with your local network environment. If npm works on a different network, you'll know the issue is likely your proxy/firewall at the original network.\n6. **Increase timeouts (if necessary):** On very slow networks, you can extend npm's timeouts: e.g. `npm config set fetch-retries 5` and `npm config set fetch-timeout 300000` (5 minutes). This is rarely needed, but can help if connections are just slow and not completely blocked.\n\nAfter adjusting the above, try the npm command again. Network errors should be resolved once connectivity or proxy issues are sorted out."
  },
  {
    "input": "E401 Unauthorized (need authorization)",
    "target": "**Issue:** You receive an `E401 Unauthorized` or a message indicating you need to be authorized when attempting an npm operation (such as installing a private package or publishing).\n\n**Cause:** This error means the npm registry rejected your request due to lack of authentication. It commonly occurs when trying to access a private module without being logged in or when your auth token has expired/invalid.\n\n**Solution:**\n1. **Log in to npm:** Run `npm login` and enter your credentials for the registry (for the public registry, your npmjs.com account). This will save an authentication token to `~/.npmrc`. If you are already logged in, the token might be expired or invalid—logging in again refreshes it.\n2. **Use or set up an npm token:** For CI environments or scripts, use a token instead of interactive login. On npmjs.com, create a new access token (Ensure it has the appropriate access: e.g., read-only for installing private packages, or publish access if you're publishing). Then set it in your environment or npm config:\n   ```shell\n   npm config set //registry.npmjs.org/:_authToken <your_token_here>\n   ```\n3. **Correct registry config:** If the package is on a custom registry (e.g., internal company registry or GitHub Package Registry), make sure your npm is pointed to it and you have auth for that source. For example, set the registry in your `.npmrc` and include an auth token for that domain.\n4. **Check user access:** Ensure your user account has permission to the resource. For private npm org packages, verify your account is part of the team or org. For scoped packages, you may need to prefix the scope in the login (`npm login --scope=@yourscope`).\n5. **Logout and login (cache clear):** If issues persist, do `npm logout` to clear saved credentials and then `npm login` again. This ensures you're using fresh credentials.\n\nOnce you have a valid login or auth token configured, retry the npm command. The 401 error should be resolved, and you’ll be able to access or publish the protected package."
  },
  {
    "input": "ERESOLVE unable to resolve dependency tree",
    "target": "**Issue:** npm fails to install packages due to `ERESOLVE unable to resolve dependency tree`. This means npm's dependency resolution algorithm found conflicting or unsatisfiable versions among your packages and their dependencies.\n\n**Cause:** With npm v7+ (and later), stricter dependency resolution is enforced, especially for peer dependencies. A conflict arises when two packages require incompatible versions of a third package, or a peer dependency cannot be satisfied by any installed version.\n\n**Solution:** Resolve the dependency conflict by adjusting versions or overriding the resolution:\n1. **Identify the conflict:** The npm error output will usually show which packages are in conflict and what versions are required vs found. For example, it might say Package A requires Package C@^1 but Package B requires Package C@^2, and both A and B are dependencies in your project.\n2. **Adjust your direct dependencies:** If possible, modify your `package.json` to use versions of packages that are compatible with each other. For instance, upgrading or downgrading a dependency to a version that resolves the peer dependency conflict.\n3. **Install missing peer deps:** If the error is about a peer dependency that isn't installed, you can manually install that peer dependency in your project. For example, if it says `requires peer react@^17` but none is installed, run `npm install react@17` to satisfy it.\n4. **Use legacy peer deps (workaround):** If you're unable to resolve the conflict immediately, you can instruct npm to ignore peer dependency conflicts by using the `--legacy-peer-deps` flag: \n   ```shell\n   npm install --legacy-peer-deps\n   ``` \n   or, to force even with other conflicts, `npm install --force`. These flags tell npm to proceed despite the dependency tree issues. **Note:** This can lead to a potentially broken installation (in terms of compatibility), but might be acceptable for development or when you know the conflict won't actually break your use-case.\n5. **Clean install:** Sometimes, leftover dependencies can confuse the resolver. Remove `node_modules` and `package-lock.json` and try a fresh `npm install`. This ensures npm starts resolution from scratch.\n6. **Check for updates:** It's possible the package maintainers have addressed the conflict in newer releases. Check if there's an updated version of the packages that loosens or changes the conflicting dependency requirement.\n\nUltimately, the goal is to have a dependency tree where all requirements can be met. It's best to explicitly resolve the conflicts by aligning versions, rather than relying on `--force` in the long term. After making changes, run `npm install` again and the ERESOLVE error should be gone."
  },
  {
    "input": "node-gyp build error (native module compilation failed)",
    "target": "**Issue:** npm install fails with errors from **node-gyp** or other build tools. You might see messages about Python not found, missing C++ compiler, or failure to build a native module (e.g., \"gyp ERR! build error\").\n\n**Cause:** Some npm packages include native code that must be compiled on your machine (using node-gyp under the hood). If the required build tools (a C/C++ compiler, Python, etc.) are not set up, the compilation will fail.\n\n**Solution:** Install the necessary build tools for your platform and retry:\n- **On Windows:** Install the Windows Build Tools and Python:\n   1. Ensure you have Python 3 installed (Python 2 is deprecated; most modules now work with Python 3). Install from python.org and add it to PATH.\n   2. Install Visual Studio Build Tools (C++ toolchain). You can do this by installing the \"Desktop development with C++\" workload via the Visual Studio Installer, or run the command:\n      ```shell\n      npm install -g windows-build-tools\n      ```\n      (This is a one-shot script that installs Python 2 and VC++ Build Tools, but in 2025 you might directly install newer Build Tools from Microsoft).\n   3. After installation, ensure the environment variables are set. The windows-build-tools step sets up most of it. Open a new terminal (with Administrator privilege if needed) and try installing the package again.\n- **On macOS:** Install Xcode Command Line Tools which provide the C++ compiler:\n   ```shell\n   xcode-select --install\n   ```\n   This will prompt to install the developer tools. Also, ensure you have Python installed (macOS typically has Python 2.x by default; you may need Python 3 for some modules). You can use Homebrew: `brew install python`.\n- **On Linux:** Install the build-essential tools and Python via your package manager. For Debian/Ubuntu:\n   ```shell\n   sudo apt-get update && sudo apt-get install -y build-essential python3 make g++\n   ```\n   For CentOS/RHEL: `yum groupinstall 'Development Tools'` and ensure Python 3 is installed.\n- **Configure Python path (if needed):** If node-gyp still complains it can't find Python, explicitly set it:\n   ```shell\n   npm config set python /path/to/your/python3\n   ```\n   Replace with the actual path to Python executable.\n\nAfter installing the appropriate tools, clean up the failed package (remove its `node_modules/<package>` folder if present) and run `npm install` again. The native module should now compile successfully. If errors persist, read the specific error messages - they often indicate if a library or path is missing. Installing any additional system libraries mentioned will help resolve the build failure."
  },
  {
    "input": "Refusing to install package as a dependency of itself",
    "target": "**Issue:** npm prints an error like \"refusing to install <packagename> as a dependency of itself\" and aborts the install. This typically happens when your project's name matches the name of a package you're trying to install.\n\n**Cause:** If your package.json's **name** field is, say, \"my-app\", and you run `npm install my-app`, npm will detect that you're attempting to install the project into itself (which doesn't make sense). It's a protective measure to prevent cyclic or erroneous installs.\n\n**Solution:**\n1. **Avoid installing the project by its own name:** Usually this error is an accident. If you intended to install dependencies, simply run `npm install` without specifying your own package name. If you were trying to update your project itself, you don't do that via npm install (since it's your code, not an external package).\n2. **Rename either the project or the dependency:** If you actually intended to install a different package with the same name as your project, that's a conflict. You can change your project's name in package.json to something unique, or if you control the dependency, use a different name for it. Package names must be unique in npm registry; your local project name can be anything, so adjust it to avoid clashing.\n3. **Check for mistakes in package.json:** Sometimes this error surfaces when doing `npm install` if there's a dependency listed that exactly matches the project name. Remove that dependency entry if it's there, as it's not needed for a project to depend on itself.\n\nAfter ensuring you are not installing a package into itself, rerun the install or other npm command. The error should be resolved once the package name conflict is eliminated."
  },
  {
    "input": "npm ERR! code ELIFECYCLE (script failed)",
    "target": "**Issue:** You see `npm ERR! code ELIFECYCLE` in the output. This is usually accompanied by the name of a script (like *build*, *start*, *test* or an *install* script) and an error message from that script. It means a lifecycle script for a package has failed (exited with a non-zero status).\n\n**Cause:** `ELIFECYCLE` is not a bug in npm itself, but an error thrown because one of the scripts (defined in the package.json under \"scripts\") failed. For example, a post-install script might have thrown an error, or running `npm run build` failed due to code issues. The actual cause is the underlying script's failure.\n\n**Solution:** Debug and fix the failing script or its environment:\n1. **Read the error output above ELIFECYCLE:** npm will print the command that was run and any error output from it. Identify which script failed (e.g., *node-gyp rebuild*, *npm run build*, *test script*, etc.) and read the error message to understand why it failed.\n2. **Resolve the script's error:** Once you know the failing command, address the root cause. For example:\n   - If it's a compile error in your code, fix the code issue.\n   - If it's an environment issue (like missing dependency for node-gyp, or a command not found), install the required dependency or adjust your environment PATH.\n3. **Run the script manually:** Try running the same script outside of npm to see the full output (e.g., `npm run build` if that is failing during install). This can sometimes show interactive prompts or more detailed errors that were hidden.\n4. **Check for permission issues:** If the script was trying to access files and failed, ensure it has permission. For instance, a postinstall script writing to a system directory could fail with EACCES; you'd need to fix the script or run in proper context.\n5. **Optional: Skip optional scripts:** If the failing script is an optional dependency's install script and not critical, you can bypass optional dependencies by running `npm install --no-optional`. This isn't a true fix but can get past issues in non-essential packages.\n\nIn summary, fix whatever problem caused the script to fail. After that, rerun npm (or the specific script) and it should complete without the ELIFECYCLE error. Because this error is just a wrapper for \"script failed\", the real solution lies in addressing that underlying failure."
  },
  {
    "input": "Unsupported engine (Node or npm version incompatible)",
    "target": "**Issue:** npm refuses to install a package (or prints a warning/error) due to an \"unsupported engine\" or similar message. This often appears as `npm ERR! code ENOTSUP` or text indicating your Node.js version (or npm version) does not meet a package's required \"engines\" specification.\n\n**Cause:** The `package.json` of some packages defines an **engines** field, e.g., requiring `node >=14` or a specific npm version. If you're running a Node version outside of that range, npm (especially newer npm versions) will either warn or outright error (depending on the `engineStrict` setting).\n\n**Solution:** Use a Node version that satisfies the requirement, or adjust/override if necessary:\n1. **Upgrade/Downgrade Node.js:** The straightforward solution is to switch your Node.js version to one compatible with the package. For example, if the package requires Node >=14 and you're on 12, install Node 14 or higher. Tools like nvm (Node Version Manager) can help you install and switch Node versions easily.\n2. **Check npm version if specified:** Similarly, if the error calls out an npm version, update npm to that version (or newer). Usually, though, it's Node version that's the issue.\n3. **Bypass engine strictness (if you know it's safe):** If you believe the package will actually work on your Node version despite the warning (for instance, the engine field is overly strict), you can bypass this. Set `npm config set engine-strict false` (if it was true), or run npm with `--ignore-engines`. Note that ignoring engines might lead to runtime issues if the package truly doesn't support your environment.\n4. **Use an alternative package version:** If you cannot change Node easily, see if there's an older version of the package that supports your Node version. For example, some libraries maintained separate major versions for older Node support.\n\nOnce your Node environment meets the engine requirements (or you've opted to bypass them with caution), try installing again. The unsupported engine error should no longer occur and the package should install successfully."
  }
]
